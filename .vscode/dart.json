{
    "BlocState": {
        "prefix": "blocstate",
        "body": [
            "part of '${1:BlocFileNameBase}_bloc.dart';",
            "",
            "typedef ${2:Subject}StateMatch<T, S extends ${2:Subject}State> = T Function(S state);",
            "",
            "sealed class ${2:Subject}State extends Equatable {",
            "  const ${2:Subject}State();",
            "",
            "  const factory ${2:Subject}State.loading() = ${2:Subject}StateLoading;",
            "",
            "  const factory ${2:Subject}State.success({",
            "    required Object data,",
            "  }) = ${2:Subject}StateSuccess;",
            "",
            "  const factory ${2:Subject}State.error() = ${2:Subject}StateError;",
            "",
            "  T map<T>({",
            "    required ${2:Subject}StateMatch<T, ${2:Subject}StateLoading> loading,",
            "    required ${2:Subject}StateMatch<T, ${2:Subject}StateSuccess> success,",
            "    required ${2:Subject}StateMatch<T, ${2:Subject}StateError> error,",
            "  }) =>",
            "      switch (this) {",
            "        final ${2:Subject}StateLoading state => loading(state),",
            "        final ${2:Subject}StateSuccess state => success(state),",
            "        final ${2:Subject}StateError state => error(state),",
            "      };",
            "",
            "  T? mapOrNull<T>({",
            "    ${2:Subject}StateMatch<T, ${2:Subject}StateLoading>? loading,",
            "    ${2:Subject}StateMatch<T, ${2:Subject}StateSuccess>? success,",
            "    ${2:Subject}StateMatch<T, ${2:Subject}StateError>? error,",
            "  }) =>",
            "      map<T?>(",
            "        loading: loading ?? (_) => null,",
            "        success: success ?? (_) => null,",
            "        error: error ?? (_) => null,",
            "      );",
            "",
            "  T maybeMap<T>({",
            "    required T Function() orElse,",
            "    ${2:Subject}StateMatch<T, ${2:Subject}StateLoading>? loading,",
            "    ${2:Subject}StateMatch<T, ${2:Subject}StateSuccess>? success,",
            "    ${2:Subject}StateMatch<T, ${2:Subject}StateError>? error,",
            "  }) =>",
            "      map<T>(",
            "        loading: loading ?? (_) => orElse(),",
            "        success: success ?? (_) => orElse(),",
            "        error: error ?? (_) => orElse(),",
            "      );",
            "}",
            "",
            "/// States",
            "",
            "final class ${2:Subject}StateLoading extends ${2:Subject}State {",
            "  const ${2:Subject}StateLoading();",
            "",
            "  @override",
            "  List<Object?> get props => [];",
            "}",
            "",
            "final class ${2:Subject}StateSuccess extends ${2:Subject}State {",
            "  final Object data;",
            "",
            "  const ${2:Subject}StateSuccess({",
            "    required this.data,",
            "  });",
            "",
            "  @override",
            "  List<Object?> get props => [data];",
            "}",
            "",
            "final class ${2:Subject}StateError extends ${2:Subject}State {",
            "  const ${2:Subject}StateError();",
            "",
            "  @override",
            "  List<Object?> get props => [];",
            "}"
        ],
        "description": "Generate a Bloc state class"
    },
    "BlocEvent": {
        "prefix": "blocevent",
        "body": [
            "part of '${1:BlocFileNameBase}_bloc.dart';",
            "",
            "typedef ${2:Subject}EventMatch<T, S extends ${2:Subject}Event> = T Function(S event);",
            "",
            "sealed class ${2:Subject}Event extends Equatable {",
            "  const ${2:Subject}Event();",
            "",
            "  const factory ${2:Subject}Event.start() = ${2:Subject}EventStart;",
            "",
            "  T map<T>({",
            "    required ${2:Subject}EventMatch<T, ${2:Subject}EventStart> start,",
            "  }) =>",
            "      switch (this) {",
            "        final ${2:Subject}EventStart event => start(event),",
            "      };",
            "}",
            "",
            "final class ${2:Subject}EventStart extends ${2:Subject}Event {",
            "  const ${2:Subject}EventStart();",
            "",
            "  @override",
            "  List<Object?> get props => [];",
            "}"
        ],
        "description": "Generate a Bloc event class"
    },
    "Bloc": {
        "prefix": "bloc",
        "body": [
            "import 'dart:async';",
            "",
            "import 'package:bloc/bloc.dart';",
            "import 'package:equatable/equatable.dart';",
            "",
            "part '${1:BlocFileNameBase}_event.dart';",
            "part '${1:BlocFileNameBase}_state.dart';",
            "",
            "class ${2:Subject}Bloc extends Bloc<${2:Subject}Event, ${2:Subject}State> {",
            "  ${2:Subject}Bloc() : super(const ${2:Subject}State.loading()) {",
            "    on<${2:Subject}Event>(",
            "      (event, emit) => event.map(",
            "        start: (event) => _onStart(event, emit),",
            "      ),",
            "    );",
            "  }",
            "",
            "  Future<void> _onStart(",
            "    ${2:Subject}EventStart event,",
            "    Emitter<${2:Subject}State> emit,",
            "  ) async {",
            "    try {",
            "      emit(const ${2:Subject}State.loading());",
            "",
            "      // do something",
            "",
            "      emit(const ${2:Subject}State.success(data: Object()));",
            "    } catch (e, s) {",
            "      addError(e, s);",
            "",
            "      emit(const ${2:Subject}State.error());",
            "    }",
            "  }",
            "}"
        ],
        "description": "Generate a Bloc class"
    }
}